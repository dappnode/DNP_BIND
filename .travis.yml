sudo: required

jobs:
  include:
    # In app tests
    ##############
    - stage: test
      services:
        - docker
      env:
        - INTEGRATION_TEST
      before_install:
        - chmod +x test/test.sh
      script:
        - test/test.sh

    # Test that it builds correctly
    ###############################
    - stage: build test
      services:
        - docker
      script:
        - docker-compose -f "$(find . -maxdepth 1 -name "docker-compose*")" build

    # Deploy stage
    # - code below is common between DAppNode packages
    ##################################################
    - stage: release
      services:
        - docker
      script: skip
      node_js: lts/*
      before_deploy:
        # Run the dappnodesdk
        - travis_retry npm install -g @dappnode/dappnodesdk
        - export TRAVIS_TAG=$(dappnodesdk -p infura next patch)
        - echo "NEXT TRAVIS_TAG $TRAVIS_TAG"
        - dappnodesdk -p infura publish patch
        # Set up git user name
        - git config --global user.email "dappnode@dappnode.io"
        - git config --global user.name "dappnode"
        # Correct origin to push new branch
        - git remote rm origin
        - git remote add origin https://user:${GITHUB_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git
        # Check if the tag exists, if so delete it
        - if [ $(git tag -l "$TRAVIS_TAG") ]; then export DELETE_TAG=true ; fi
        - if [ $DELETE_TAG ]; then git push --delete origin $TRAVIS_TAG || echo "Error deleting tag from origin" ; fi
        - if [ $DELETE_TAG ]; then git tag --delete $TRAVIS_TAG || echo "Error deleting tag locally" ; fi
        # Tag this commit
        - git tag $TRAVIS_TAG
        # Return to master.
        - git checkout master
      deploy:
        provider: releases
        prerelease: true
        api_key: "$GITHUB_TOKEN"
        file_glob: true
        file: build_${TRAVIS_TAG}/*
        skip_cleanup: true
        name: "v$TRAVIS_TAG"
        body: "# Changelog"
        on:
          branch: master
      after_deploy:
        echo "Successfully released"
        # - export GIT_BRANCH="master"
        # - bash github_release_script.sh
        # - echo "FINAL AFTER RELEASE SCRIPT"
        # - echo "$(Date)" > a.text
        # - git add .
        # - git commit -m "message"
        # - git checkout -b "v0.1.15"
        # - git push origin "v0.1.15"
